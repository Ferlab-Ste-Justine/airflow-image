airflow:
  config: {}
  connections: []
  connectionsTemplates: {}
  connectionsUpdate: true
  dbMigrations:
    affinity: {}
    annotations: {}
    checkInterval: 300
    enabled: true
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    resources: {}
    runAsJob: false
    safeToEvict: true
    securityContext: {}
    tolerations: []
  defaultAffinity: {}
  defaultNodeSelector: {}
  defaultSecurityContext:
    fsGroup: 0
  defaultTolerations: []
  executor: CeleryExecutor
  extraContainers: []
  extraEnv:
    - name: AIRFLOW__WEBSERVER__SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: airflow-webserver-secret-key
          key: value
  extraPipPackages: []
  extraVolumeMounts: []
  extraVolumes: []
  fernetKey: 7T512UXSSmBOkpWimFHIVb8jK6lfmSAvx4mO6Arehnc=
  image:
    gid: 0
    pullPolicy: Always
    pullSecret: ''
    repository: ferlabcrsj/airflow
    tag: 2.1.4-python3.8
    uid: 50000
  kubernetesPodTemplate:
    affinity: {}
    extraPipPackages: []
    extraVolumeMounts: []
    extraVolumes: []
    nodeSelector: {}
    podAnnotations: {}
    resources: {}
    securityContext: {}
    stringOverride: ''
    tolerations: []
  legacyCommands: false
  localSettings:
    existingSecret: ''
    stringOverride: ''
  podAnnotations: {}
  pools: []
  poolsUpdate: true
  sync:
    affinity: {}
    annotations: {}
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    resources: {}
    safeToEvict: true
    securityContext: {}
    tolerations: []
  users:
    - email: admin@example.com
      firstName: admin
      lastName: admin
      password: admin
      role: Admin
      username: admin
  usersTemplates: {}
  usersUpdate: true
  variables: []
  variablesTemplates: {}
  variablesUpdate: true
  webserverSecretKey: "THIS IS UNSAFE!"
dags:
  gitSync:
    branch: master
    depth: 1
    enabled: true
    httpSecret: github-http-credentials
    httpSecretPasswordKey: password
    httpSecretUsernameKey: username
    image:
      gid: 65533
      pullPolicy: IfNotPresent
      repository: k8s.gcr.io/git-sync/git-sync
      tag: v3.2.2
      uid: 65533
    maxFailures: 0
    repo: https://github.com/Ferlab-Ste-Justine/unic-dag.git
    repoSubPath: dags
    resources: {}
    revision: HEAD
    sshKnownHosts: ''
    sshSecret: ''
    sshSecretKey: ''
    syncTimeout: 120
    syncWait: 30
  path: /opt/airflow/dags
  persistence:
    accessMode: ReadOnlyMany
    enabled: false
    existingClaim: ''
    size: 1Gi
    storageClass: ''
    subPath: ''
externalDatabase:
  database: airflow
  host: localhost
  passwordSecret: ''
  passwordSecretKey: postgresql-password
  port: 5432
  properties: ''
  type: postgres
  user: airflow
externalRedis:
  databaseNumber: 1
  host: localhost
  passwordSecret: ''
  passwordSecretKey: redis-password
  port: 6379
  properties: ''
extraManifests: []
flower:
  affinity: {}
  annotations: {}
  basicAuthSecret: ''
  basicAuthSecretKey: ''
  enabled: true
  extraPipPackages: []
  extraVolumeMounts: []
  extraVolumes: []
  labels: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget:
    enabled: false
    maxUnavailable: ''
    minAvailable: ''
  podLabels: {}
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
  replicas: 1
  resources: {}
  safeToEvict: true
  securityContext: {}
  service:
    annotations: {}
    externalPort: 5555
    loadBalancerIP: ''
    loadBalancerSourceRanges: []
    nodePort:
      http: null
    type: ClusterIP
  tolerations: []
ingress:
  apiVersion: networking.k8s.io/v1
  enabled: false
  flower:
    annotations: {}
    host: ''
    labels: {}
    path: ''
    precedingPaths: []
    succeedingPaths: []
    tls:
      enabled: false
      secretName: ''
  web:
    annotations: {}
    host: ''
    labels: {}
    path: ''
    precedingPaths: []
    succeedingPaths: []
    tls:
      enabled: false
      secretName: ''
logs:
  path: /opt/airflow/logs
  persistence:
    accessMode: ReadWriteMany
    enabled: false
    existingClaim: ''
    size: 10Gi
    storageClass: ''
    subPath: ''
pgbouncer:
  affinity: {}
  annotations: {}
  clientSSL:
    caFile:
      existingSecret: ''
      existingSecretKey: root.crt
    certFile:
      existingSecret: ''
      existingSecretKey: client.crt
    ciphers: normal
    keyFile:
      existingSecret: ''
      existingSecretKey: client.key
    mode: prefer
  enabled: true
  image:
    gid: 1001
    pullPolicy: IfNotPresent
    repository: ghcr.io/airflow-helm/pgbouncer
    tag: 1.15.0-patch.0
    uid: 1001
  labels: {}
  livenessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 5
    periodSeconds: 30
    timeoutSeconds: 60
  logConnections: 0
  logDisconnections: 0
  maxClientConnections: 100
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget:
    enabled: false
    maxUnavailable: null
    minAvailable: null
  podLabels: {}
  poolSize: 20
  resources: {}
  safeToEvict: true
  securityContext: {}
  serverSSL:
    caFile:
      existingSecret: ''
      existingSecretKey: root.crt
    certFile:
      existingSecret: ''
      existingSecretKey: server.crt
    ciphers: normal
    keyFile:
      existingSecret: ''
      existingSecretKey: server.key
    mode: prefer
  terminationGracePeriodSeconds: 120
  tolerations: []
postgresql:
  enabled: true
  existingSecret: ''
  existingSecretKey: postgresql-password
  master:
    affinity: {}
    nodeSelector: {}
    podAnnotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: 'true'
    tolerations: []
  persistence:
    accessModes:
      - ReadWriteOnce
    enabled: true
    size: 8Gi
    storageClass: ''
  postgresqlDatabase: airflow
  postgresqlPassword: airflow
  postgresqlUsername: postgres
prometheusRule:
  additionalLabels: {}
  enabled: false
  groups: []
rbac:
  create: true
  events: true
redis:
  cluster:
    enabled: false
    slaveCount: 1
  enabled: true
  existingSecret: ''
  existingSecretPasswordKey: redis-password
  master:
    affinity: {}
    nodeSelector: {}
    persistence:
      accessModes:
        - ReadWriteOnce
      enabled: false
      size: 8Gi
      storageClass: ''
    podAnnotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: 'true'
    resources: {}
    tolerations: []
  password: airflow
  slave:
    affinity: {}
    nodeSelector: {}
    persistence:
      accessModes:
        - ReadWriteOnce
      enabled: false
      size: 8Gi
      storageClass: ''
    podAnnotations:
      cluster-autoscaler.kubernetes.io/safe-to-evict: 'true'
    resources: {}
    tolerations: []
scheduler:
  affinity: {}
  annotations: {}
  extraInitContainers: []
  extraPipPackages: []
  extraVolumeMounts: []
  extraVolumes: []
  labels: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 10
    periodSeconds: 30
    timeoutSeconds: 60
  nodeSelector: {}
  numRuns: -1
  podAnnotations: {}
  podDisruptionBudget:
    enabled: false
    maxUnavailable: ''
    minAvailable: ''
  podLabels: {}
  replicas: 1
  resources: {}
  safeToEvict: true
  securityContext: {}
  tolerations: []
serviceAccount:
  annotations: {}
  create: false
  name: spark
serviceMonitor:
  enabled: false
  interval: 30s
  path: /admin/metrics
  selector:
    prometheus: kube-prometheus
web:
  affinity: {}
  annotations: {}
  extraPipPackages: []
  extraVolumeMounts: []
  extraVolumes: []
  labels: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget:
    enabled: false
    maxUnavailable: ''
    minAvailable: ''
  podLabels: {}
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
  replicas: 1
  resources: {}
  safeToEvict: true
  securityContext: {}
  service:
    annotations: {}
    externalPort: 8080
    loadBalancerIP: ''
    loadBalancerSourceRanges: []
    nodePort:
      http: ''
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  tolerations: []
  webserverConfig:
    existingSecret: ''
    stringOverride: ''
workers:
  affinity: {}
  annotations: {}
  autoscaling:
    enabled: false
    maxReplicas: 4
    metrics: []
  celery:
    gracefullTermination: false
    gracefullTerminationPeriod: 600
  enabled: true
  extraPipPackages: []
  extraVolumeMounts: []
  extraVolumes: []
  labels: {}
  nodeSelector: {}
  podAnnotations: {}
  podDisruptionBudget:
    enabled: false
    maxUnavailable: ''
    minAvailable: ''
  podLabels: {}
  replicas: 6
  resources:
    requests:
      cpu: '1'
      memory: 6G
  safeToEvict: true
  securityContext: {}
  terminationPeriod: 60
  tolerations: []
